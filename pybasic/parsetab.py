
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftCOLONleftCOMMAleftANDORleftEQUALSNOT_EQUALGREATER_THANLESS_THANEQUAL_GREATER_THANEQUAL_LESS_THANleftASleftPLUSMINUSleftTIMESDIVIDEMODleftEXPrightUMINUSNOTleftDOTAND AS CASE COLON COMMA CONTINUE DECIMAL DEFUN DIM DIVIDE DO DOT ELSE ELSEIF END EQUALS EQUAL_GREATER_THAN EQUAL_LESS_THAN EXACTDIV EXIT EXP FOR FUNCTION GREATER_THAN ID IF INTEGER LBRACE LESS_THAN LET LOOP LPAREN MINUS MOD NEXT NOT NOT_EQUAL OR PLUS RBRACE RETURN RPAREN SELECT STEP STRING SUB THEN TIMES TO UNTIL USE WEND WHILE\n    statement : statement COLON statement\n    \n    statement : assignment\n              | declaration\n              | funcall\n              | control\n              | return\n              | defun_statement\n    \n    statement : expression\n    \n    statement : block_begin\n    \n    statement : block_end\n    \n    statement : if_block_begin\n              | elseif_block_begin\n              | else_statement\n              | case_begin\n              | case_else_begin\n    \n    args_list : args_list COMMA expression\n              | expression\n    \n    params_list : params_list COMMA ID\n                | ID\n    \n    defun_statement : DEFUN ID LPAREN params_list RPAREN EQUALS expression\n    \n    funcall : ID args_list\n    \n    assignment : ID EQUALS expression\n               | LET ID EQUALS expression\n               | ID LPAREN expression RPAREN EQUALS expression\n               | expression DOT ID EQUALS expression\n    \n    declaration : declare_array\n    \n    declare_array : DIM ID LPAREN expression RPAREN AS ID\n    \n    rel_expression : expression GREATER_THAN expression\n                   | expression LESS_THAN expression\n                   | expression EQUAL_GREATER_THAN expression\n                   | expression EQUAL_LESS_THAN expression\n                   | expression EQUALS expression\n                   | expression NOT_EQUAL expression\n                   | rel_expression AND rel_expression\n                   | rel_expression OR rel_expression\n                   | LPAREN rel_expression RPAREN\n                   | NOT rel_expression\n    \n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | expression EXACTDIV expression\n               | expression MOD expression\n               | expression AS expression\n               | expression EXP expression\n               | expression DOT ID\n               | MINUS expression %prec UMINUS\n               | LPAREN expression RPAREN\n    \n    expression : ID LPAREN RPAREN\n               | ID LPAREN args_list RPAREN\n    \n    expression : INTEGER\n               | DECIMAL\n    \n    expression : STRING\n    \n    expression : ID\n    \n    expression : LBRACE args_list RBRACE\n    \n    block_begin : while_block_begin\n                | for_block_begin\n                | do_block_begin\n                | function_block_begin\n    \n    if_block_begin : IF rel_expression THEN\n    \n    else_statement : ELSE\n    \n    elseif_block_begin : ELSEIF rel_expression THEN\n    \n    statement : SELECT CASE expression\n              | SELECT expression\n    \n    case_begin : CASE expression\n    \n    case_else_begin : CASE ELSE\n    \n    while_block_begin : WHILE rel_expression\n    \n    do_block_begin : DO\n    \n    for_block_begin : FOR ID EQUALS expression TO expression\n                    | FOR ID EQUALS expression TO expression STEP expression\n    \n    function_block_begin : SUB ID LPAREN params_list RPAREN\n                         | FUNCTION ID LPAREN params_list RPAREN\n                         | SUB ID LPAREN RPAREN\n                         | FUNCTION ID LPAREN RPAREN\n    \n    block_end : END IF\n    \n    block_end : END SELECT\n    \n    block_end : END WHILE\n              | WEND\n    \n    block_end : END FOR\n              | NEXT ID\n    \n    block_end : LOOP\n              | LOOP WHILE rel_expression\n              | LOOP UNTIL rel_expression\n    \n    block_end : END SUB\n              | END FUNCTION\n    \n    return : RETURN\n           | RETURN expression\n    \n    control : EXIT WHILE\n            | EXIT DO\n            | EXIT FOR\n    \n    control : CONTINUE WHILE\n            | CONTINUE DO\n            | CONTINUE FOR\n    \n    statement : USE ID\n    '
    
_lr_action_items = {'SELECT':([0,39,49,],[16,87,16,]),'USE':([0,49,],[18,18,]),'ID':([0,16,17,18,19,20,21,24,26,28,29,30,34,40,42,44,45,46,48,49,50,51,52,53,54,55,56,57,58,59,65,67,76,77,94,95,111,112,117,118,120,121,122,123,124,125,126,127,131,132,137,138,140,141,165,166,168,174,176,177,],[19,61,61,64,61,69,61,61,78,61,83,61,61,61,93,96,97,61,99,19,101,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,142,61,61,61,61,61,61,61,61,61,61,61,61,157,157,157,61,61,61,61,175,61,179,61,]),'LET':([0,49,],[20,20,]),'EXIT':([0,49,],[23,23,]),'CONTINUE':([0,49,],[27,27,]),'RETURN':([0,49,],[28,28,]),'DEFUN':([0,49,],[29,29,]),'MINUS':([0,8,16,17,19,21,24,28,30,31,32,33,34,40,46,49,51,52,53,54,55,56,57,58,59,60,61,62,65,66,67,70,75,76,77,82,84,94,95,101,102,103,104,105,106,107,108,109,110,112,113,114,115,117,118,119,120,121,122,123,124,125,126,127,129,131,133,140,141,142,143,144,145,146,149,150,151,152,153,154,156,163,164,165,166,172,173,174,177,178,180,],[30,52,30,30,30,30,30,30,30,-51,-52,-53,30,30,30,30,30,30,30,30,30,30,30,30,30,52,-54,52,30,52,30,52,52,30,30,52,-47,30,30,-46,-38,-39,-40,-41,52,-43,52,-45,52,30,52,52,-49,30,30,-48,30,30,30,30,30,30,30,30,52,30,-55,30,30,-46,-48,-50,52,52,52,52,52,52,52,52,52,52,52,30,30,52,52,30,30,52,52,]),'LPAREN':([0,16,17,19,21,24,28,30,34,40,46,49,51,52,53,54,55,56,57,58,59,61,65,67,76,77,83,94,95,96,97,99,112,117,118,120,121,122,123,124,125,126,127,131,140,141,165,166,174,177,],[21,21,21,67,21,76,21,21,21,76,76,21,21,21,21,21,21,21,21,21,21,112,21,21,76,76,132,76,76,137,138,140,21,21,21,76,76,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'INTEGER':([0,16,17,19,21,24,28,30,34,40,46,49,51,52,53,54,55,56,57,58,59,65,67,76,77,94,95,112,117,118,120,121,122,123,124,125,126,127,131,140,141,165,166,174,177,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'DECIMAL':([0,16,17,19,21,24,28,30,34,40,46,49,51,52,53,54,55,56,57,58,59,65,67,76,77,94,95,112,117,118,120,121,122,123,124,125,126,127,131,140,141,165,166,174,177,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'STRING':([0,16,17,19,21,24,28,30,34,40,46,49,51,52,53,54,55,56,57,58,59,65,67,76,77,94,95,112,117,118,120,121,122,123,124,125,126,127,131,140,141,165,166,174,177,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'LBRACE':([0,16,17,19,21,24,28,30,34,40,46,49,51,52,53,54,55,56,57,58,59,65,67,76,77,94,95,112,117,118,120,121,122,123,124,125,126,127,131,140,141,165,166,174,177,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'END':([0,49,],[39,39,]),'WEND':([0,49,],[41,41,]),'NEXT':([0,49,],[42,42,]),'LOOP':([0,49,],[43,43,]),'IF':([0,39,49,],[40,86,40,]),'ELSEIF':([0,49,],[46,46,]),'ELSE':([0,17,49,],[47,63,47,]),'CASE':([0,16,49,],[17,59,17,]),'DIM':([0,49,],[48,48,]),'WHILE':([0,23,27,39,43,49,],[24,71,79,88,94,24,]),'FOR':([0,23,27,39,49,],[26,73,81,89,26,]),'DO':([0,23,27,49,],[25,72,80,25,]),'SUB':([0,39,49,],[44,90,44,]),'FUNCTION':([0,39,49,],[45,91,45,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,19,22,25,28,31,32,33,35,36,37,38,41,43,47,60,61,62,63,64,66,68,71,72,73,74,79,80,81,82,84,86,87,88,89,90,91,93,100,101,102,103,104,105,106,107,108,109,110,113,115,119,130,133,134,135,136,139,142,143,144,145,146,147,148,149,150,151,152,153,154,155,160,162,164,169,170,172,173,178,179,180,],[0,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-54,-26,-68,-86,-51,-52,-53,-56,-57,-58,-59,-78,-81,-61,-64,-54,-65,-66,-94,-17,-21,-88,-89,-90,-67,-91,-92,-93,-87,-47,-75,-76,-77,-79,-84,-85,-80,-1,-46,-38,-39,-40,-41,-42,-43,-44,-45,-63,-22,-49,-48,-37,-55,-60,-82,-83,-62,-46,-48,-50,-16,-23,-34,-35,-28,-29,-30,-31,-32,-33,-36,-73,-74,-25,-71,-72,-24,-69,-20,-27,-70,]),'COLON':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,19,22,25,28,31,32,33,35,36,37,38,41,43,47,60,61,62,63,64,66,68,71,72,73,74,79,80,81,82,84,86,87,88,89,90,91,93,100,101,102,103,104,105,106,107,108,109,110,113,115,119,130,133,134,135,136,139,142,143,144,145,146,147,148,149,150,151,152,153,154,155,160,162,164,169,170,172,173,178,179,180,],[49,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-54,-26,-68,-86,-51,-52,-53,-56,-57,-58,-59,-78,-81,-61,-64,-54,-65,-66,-94,-17,-21,-88,-89,-90,-67,-91,-92,-93,-87,-47,-75,-76,-77,-79,-84,-85,-80,-1,-46,-38,-39,-40,-41,-42,-43,-44,-45,-63,-22,-49,-48,-37,-55,-60,-82,-83,-62,-46,-48,-50,-16,-23,-34,-35,-28,-29,-30,-31,-32,-33,-36,-73,-74,-25,-71,-72,-24,-69,-20,-27,-70,]),'DOT':([8,19,31,32,33,60,61,62,66,70,75,82,84,101,102,103,104,105,106,107,108,109,110,113,114,115,119,129,133,142,143,144,145,146,149,150,151,152,153,154,156,163,164,172,173,178,180,],[50,-54,-51,-52,-53,111,-54,111,111,111,111,111,111,-46,111,111,111,111,111,111,111,111,111,111,111,-49,-48,111,-55,-46,-48,-50,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'PLUS':([8,19,31,32,33,60,61,62,66,70,75,82,84,101,102,103,104,105,106,107,108,109,110,113,114,115,119,129,133,142,143,144,145,146,149,150,151,152,153,154,156,163,164,172,173,178,180,],[51,-54,-51,-52,-53,51,-54,51,51,51,51,51,-47,-46,-38,-39,-40,-41,51,-43,51,-45,51,51,51,-49,-48,51,-55,-46,-48,-50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'TIMES':([8,19,31,32,33,60,61,62,66,70,75,82,84,101,102,103,104,105,106,107,108,109,110,113,114,115,119,129,133,142,143,144,145,146,149,150,151,152,153,154,156,163,164,172,173,178,180,],[53,-54,-51,-52,-53,53,-54,53,53,53,53,53,-47,-46,53,53,-40,-41,53,-43,53,-45,53,53,53,-49,-48,53,-55,-46,-48,-50,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'DIVIDE':([8,19,31,32,33,60,61,62,66,70,75,82,84,101,102,103,104,105,106,107,108,109,110,113,114,115,119,129,133,142,143,144,145,146,149,150,151,152,153,154,156,163,164,172,173,178,180,],[54,-54,-51,-52,-53,54,-54,54,54,54,54,54,-47,-46,54,54,-40,-41,54,-43,54,-45,54,54,54,-49,-48,54,-55,-46,-48,-50,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'EXACTDIV':([8,19,31,32,33,60,61,62,66,70,75,82,84,101,102,103,104,105,106,107,108,109,110,113,114,115,119,129,133,142,143,144,145,146,149,150,151,152,153,154,156,163,164,172,173,178,180,],[55,-54,-51,-52,-53,55,-54,55,55,55,55,55,-47,-46,-38,-39,-40,-41,55,-43,-44,-45,55,55,55,-49,-48,55,-55,-46,-48,-50,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'MOD':([8,19,31,32,33,60,61,62,66,70,75,82,84,101,102,103,104,105,106,107,108,109,110,113,114,115,119,129,133,142,143,144,145,146,149,150,151,152,153,154,156,163,164,172,173,178,180,],[56,-54,-51,-52,-53,56,-54,56,56,56,56,56,-47,-46,56,56,-40,-41,56,-43,56,-45,56,56,56,-49,-48,56,-55,-46,-48,-50,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'AS':([8,19,31,32,33,60,61,62,66,70,75,82,84,101,102,103,104,105,106,107,108,109,110,113,114,115,119,129,133,142,143,144,145,146,149,150,151,152,153,154,156,163,164,171,172,173,178,180,],[57,-54,-51,-52,-53,57,-54,57,57,57,57,57,-47,-46,-38,-39,-40,-41,57,-43,-44,-45,57,57,57,-49,-48,57,-55,-46,-48,-50,57,57,57,57,57,57,57,57,57,57,57,176,57,57,57,57,]),'EXP':([8,19,31,32,33,60,61,62,66,70,75,82,84,101,102,103,104,105,106,107,108,109,110,113,114,115,119,129,133,142,143,144,145,146,149,150,151,152,153,154,156,163,164,172,173,178,180,],[58,-54,-51,-52,-53,58,-54,58,58,58,58,58,-47,-46,58,58,58,58,58,58,58,-45,58,58,58,-49,-48,58,-55,-46,-48,-50,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'EQUALS':([19,31,32,33,61,69,75,78,84,101,102,103,104,105,106,107,108,109,115,119,129,133,142,143,144,167,],[65,-51,-52,-53,-54,118,126,131,-47,141,-38,-39,-40,-41,-42,-43,-44,-45,-49,-48,126,-55,-46,165,-50,174,]),'NOT':([24,40,46,76,77,94,95,120,121,],[77,77,77,77,77,77,77,77,77,]),'COMMA':([31,32,33,61,66,68,84,85,102,103,104,105,106,107,108,109,114,115,116,119,133,142,143,144,145,157,158,159,161,175,],[-51,-52,-53,-54,-17,117,-47,117,-38,-39,-40,-41,-42,-43,-44,-45,-17,-49,117,-48,-55,-46,-48,-50,-16,-19,168,168,168,-18,]),'RPAREN':([31,32,33,61,66,67,70,84,102,103,104,105,106,107,108,109,112,114,115,116,119,128,129,130,133,137,138,142,144,145,147,148,149,150,151,152,153,154,155,157,158,159,161,163,175,],[-51,-52,-53,-54,-17,115,119,-47,-38,-39,-40,-41,-42,-43,-44,-45,115,143,-49,144,-48,155,119,-37,-55,160,162,-46,-50,-16,-34,-35,-28,-29,-30,-31,-32,-33,-36,-19,167,169,170,171,-18,]),'GREATER_THAN':([31,32,33,61,75,84,102,103,104,105,106,107,108,109,115,119,129,133,142,144,],[-51,-52,-53,-54,122,-47,-38,-39,-40,-41,-42,-43,-44,-45,-49,-48,122,-55,-46,-50,]),'LESS_THAN':([31,32,33,61,75,84,102,103,104,105,106,107,108,109,115,119,129,133,142,144,],[-51,-52,-53,-54,123,-47,-38,-39,-40,-41,-42,-43,-44,-45,-49,-48,123,-55,-46,-50,]),'EQUAL_GREATER_THAN':([31,32,33,61,75,84,102,103,104,105,106,107,108,109,115,119,129,133,142,144,],[-51,-52,-53,-54,124,-47,-38,-39,-40,-41,-42,-43,-44,-45,-49,-48,124,-55,-46,-50,]),'EQUAL_LESS_THAN':([31,32,33,61,75,84,102,103,104,105,106,107,108,109,115,119,129,133,142,144,],[-51,-52,-53,-54,125,-47,-38,-39,-40,-41,-42,-43,-44,-45,-49,-48,125,-55,-46,-50,]),'NOT_EQUAL':([31,32,33,61,75,84,102,103,104,105,106,107,108,109,115,119,129,133,142,144,],[-51,-52,-53,-54,127,-47,-38,-39,-40,-41,-42,-43,-44,-45,-49,-48,127,-55,-46,-50,]),'RBRACE':([31,32,33,61,66,84,85,102,103,104,105,106,107,108,109,115,119,133,142,144,145,],[-51,-52,-53,-54,-17,-47,133,-38,-39,-40,-41,-42,-43,-44,-45,-49,-48,-55,-46,-50,-16,]),'AND':([31,32,33,61,74,84,92,98,102,103,104,105,106,107,108,109,115,119,128,130,133,135,136,142,144,147,148,149,150,151,152,153,154,155,],[-51,-52,-53,-54,120,-47,120,120,-38,-39,-40,-41,-42,-43,-44,-45,-49,-48,120,-37,-55,120,120,-46,-50,-34,-35,-28,-29,-30,-31,-32,-33,-36,]),'OR':([31,32,33,61,74,84,92,98,102,103,104,105,106,107,108,109,115,119,128,130,133,135,136,142,144,147,148,149,150,151,152,153,154,155,],[-51,-52,-53,-54,121,-47,121,121,-38,-39,-40,-41,-42,-43,-44,-45,-49,-48,121,-37,-55,121,121,-46,-50,-34,-35,-28,-29,-30,-31,-32,-33,-36,]),'THEN':([31,32,33,61,84,92,98,102,103,104,105,106,107,108,109,115,119,130,133,142,144,147,148,149,150,151,152,153,154,155,],[-51,-52,-53,-54,-47,134,139,-38,-39,-40,-41,-42,-43,-44,-45,-49,-48,-37,-55,-46,-50,-34,-35,-28,-29,-30,-31,-32,-33,-36,]),'TO':([31,32,33,61,84,102,103,104,105,106,107,108,109,115,119,133,142,144,156,],[-51,-52,-53,-54,-47,-38,-39,-40,-41,-42,-43,-44,-45,-49,-48,-55,-46,-50,166,]),'STEP':([31,32,33,61,84,102,103,104,105,106,107,108,109,115,119,133,142,144,173,],[-51,-52,-53,-54,-47,-38,-39,-40,-41,-42,-43,-44,-45,-49,-48,-55,-46,-50,177,]),'UNTIL':([43,],[95,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,49,],[1,100,]),'assignment':([0,49,],[2,2,]),'declaration':([0,49,],[3,3,]),'funcall':([0,49,],[4,4,]),'control':([0,49,],[5,5,]),'return':([0,49,],[6,6,]),'defun_statement':([0,49,],[7,7,]),'expression':([0,16,17,19,21,24,28,30,34,40,46,49,51,52,53,54,55,56,57,58,59,65,67,76,77,94,95,112,117,118,120,121,122,123,124,125,126,127,131,140,141,165,166,174,177,],[8,60,62,66,70,75,82,84,66,75,75,8,102,103,104,105,106,107,108,109,110,113,114,129,75,75,75,66,145,146,75,75,149,150,151,152,153,154,156,163,164,172,173,178,180,]),'block_begin':([0,49,],[9,9,]),'block_end':([0,49,],[10,10,]),'if_block_begin':([0,49,],[11,11,]),'elseif_block_begin':([0,49,],[12,12,]),'else_statement':([0,49,],[13,13,]),'case_begin':([0,49,],[14,14,]),'case_else_begin':([0,49,],[15,15,]),'declare_array':([0,49,],[22,22,]),'while_block_begin':([0,49,],[35,35,]),'for_block_begin':([0,49,],[36,36,]),'do_block_begin':([0,49,],[37,37,]),'function_block_begin':([0,49,],[38,38,]),'args_list':([19,34,67,112,],[68,85,116,116,]),'rel_expression':([24,40,46,76,77,94,95,120,121,],[74,92,98,128,130,135,136,147,148,]),'params_list':([132,137,138,],[158,159,161,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> statement COLON statement','statement',3,'p_multi_statement','basic_yacc.py',34),
  ('statement -> assignment','statement',1,'p_singleline_statement','basic_yacc.py',45),
  ('statement -> declaration','statement',1,'p_singleline_statement','basic_yacc.py',46),
  ('statement -> funcall','statement',1,'p_singleline_statement','basic_yacc.py',47),
  ('statement -> control','statement',1,'p_singleline_statement','basic_yacc.py',48),
  ('statement -> return','statement',1,'p_singleline_statement','basic_yacc.py',49),
  ('statement -> defun_statement','statement',1,'p_singleline_statement','basic_yacc.py',50),
  ('statement -> expression','statement',1,'p_expression','basic_yacc.py',58),
  ('statement -> block_begin','statement',1,'p_multiline_begin_statement','basic_yacc.py',66),
  ('statement -> block_end','statement',1,'p_multiline_end_statement','basic_yacc.py',75),
  ('statement -> if_block_begin','statement',1,'p_logic_control','basic_yacc.py',82),
  ('statement -> elseif_block_begin','statement',1,'p_logic_control','basic_yacc.py',83),
  ('statement -> else_statement','statement',1,'p_logic_control','basic_yacc.py',84),
  ('statement -> case_begin','statement',1,'p_logic_control','basic_yacc.py',85),
  ('statement -> case_else_begin','statement',1,'p_logic_control','basic_yacc.py',86),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list','basic_yacc.py',92),
  ('args_list -> expression','args_list',1,'p_args_list','basic_yacc.py',93),
  ('params_list -> params_list COMMA ID','params_list',3,'p_param_list','basic_yacc.py',103),
  ('params_list -> ID','params_list',1,'p_param_list','basic_yacc.py',104),
  ('defun_statement -> DEFUN ID LPAREN params_list RPAREN EQUALS expression','defun_statement',7,'p_defun','basic_yacc.py',114),
  ('funcall -> ID args_list','funcall',2,'p_funcall','basic_yacc.py',129),
  ('assignment -> ID EQUALS expression','assignment',3,'p_assignment','basic_yacc.py',136),
  ('assignment -> LET ID EQUALS expression','assignment',4,'p_assignment','basic_yacc.py',137),
  ('assignment -> ID LPAREN expression RPAREN EQUALS expression','assignment',6,'p_assignment','basic_yacc.py',138),
  ('assignment -> expression DOT ID EQUALS expression','assignment',5,'p_assignment','basic_yacc.py',139),
  ('declaration -> declare_array','declaration',1,'p_declare','basic_yacc.py',152),
  ('declare_array -> DIM ID LPAREN expression RPAREN AS ID','declare_array',7,'p_declare_array','basic_yacc.py',158),
  ('rel_expression -> expression GREATER_THAN expression','rel_expression',3,'p_rel_expression','basic_yacc.py',164),
  ('rel_expression -> expression LESS_THAN expression','rel_expression',3,'p_rel_expression','basic_yacc.py',165),
  ('rel_expression -> expression EQUAL_GREATER_THAN expression','rel_expression',3,'p_rel_expression','basic_yacc.py',166),
  ('rel_expression -> expression EQUAL_LESS_THAN expression','rel_expression',3,'p_rel_expression','basic_yacc.py',167),
  ('rel_expression -> expression EQUALS expression','rel_expression',3,'p_rel_expression','basic_yacc.py',168),
  ('rel_expression -> expression NOT_EQUAL expression','rel_expression',3,'p_rel_expression','basic_yacc.py',169),
  ('rel_expression -> rel_expression AND rel_expression','rel_expression',3,'p_rel_expression','basic_yacc.py',170),
  ('rel_expression -> rel_expression OR rel_expression','rel_expression',3,'p_rel_expression','basic_yacc.py',171),
  ('rel_expression -> LPAREN rel_expression RPAREN','rel_expression',3,'p_rel_expression','basic_yacc.py',172),
  ('rel_expression -> NOT rel_expression','rel_expression',2,'p_rel_expression','basic_yacc.py',173),
  ('expression -> expression PLUS expression','expression',3,'p_expression_calc','basic_yacc.py',198),
  ('expression -> expression MINUS expression','expression',3,'p_expression_calc','basic_yacc.py',199),
  ('expression -> expression TIMES expression','expression',3,'p_expression_calc','basic_yacc.py',200),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_calc','basic_yacc.py',201),
  ('expression -> expression EXACTDIV expression','expression',3,'p_expression_calc','basic_yacc.py',202),
  ('expression -> expression MOD expression','expression',3,'p_expression_calc','basic_yacc.py',203),
  ('expression -> expression AS expression','expression',3,'p_expression_calc','basic_yacc.py',204),
  ('expression -> expression EXP expression','expression',3,'p_expression_calc','basic_yacc.py',205),
  ('expression -> expression DOT ID','expression',3,'p_expression_calc','basic_yacc.py',206),
  ('expression -> MINUS expression','expression',2,'p_expression_calc','basic_yacc.py',207),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_calc','basic_yacc.py',208),
  ('expression -> ID LPAREN RPAREN','expression',3,'p_inline_funcall','basic_yacc.py',237),
  ('expression -> ID LPAREN args_list RPAREN','expression',4,'p_inline_funcall','basic_yacc.py',238),
  ('expression -> INTEGER','expression',1,'p_expression_number','basic_yacc.py',248),
  ('expression -> DECIMAL','expression',1,'p_expression_number','basic_yacc.py',249),
  ('expression -> STRING','expression',1,'p_expression_string','basic_yacc.py',255),
  ('expression -> ID','expression',1,'p_expression_id','basic_yacc.py',261),
  ('expression -> LBRACE args_list RBRACE','expression',3,'p_expression_array','basic_yacc.py',267),
  ('block_begin -> while_block_begin','block_begin',1,'p_block_begin','basic_yacc.py',274),
  ('block_begin -> for_block_begin','block_begin',1,'p_block_begin','basic_yacc.py',275),
  ('block_begin -> do_block_begin','block_begin',1,'p_block_begin','basic_yacc.py',276),
  ('block_begin -> function_block_begin','block_begin',1,'p_block_begin','basic_yacc.py',277),
  ('if_block_begin -> IF rel_expression THEN','if_block_begin',3,'p_if_block_begin','basic_yacc.py',283),
  ('else_statement -> ELSE','else_statement',1,'p_else','basic_yacc.py',299),
  ('elseif_block_begin -> ELSEIF rel_expression THEN','elseif_block_begin',3,'p_elseif','basic_yacc.py',318),
  ('statement -> SELECT CASE expression','statement',3,'p_select_case_begin','basic_yacc.py',337),
  ('statement -> SELECT expression','statement',2,'p_select_case_begin','basic_yacc.py',338),
  ('case_begin -> CASE expression','case_begin',2,'p_case','basic_yacc.py',353),
  ('case_else_begin -> CASE ELSE','case_else_begin',2,'p_case_else','basic_yacc.py',381),
  ('while_block_begin -> WHILE rel_expression','while_block_begin',2,'p_while_block_begin','basic_yacc.py',404),
  ('do_block_begin -> DO','do_block_begin',1,'p_do_block_begin','basic_yacc.py',415),
  ('for_block_begin -> FOR ID EQUALS expression TO expression','for_block_begin',6,'p_for_block_begin','basic_yacc.py',426),
  ('for_block_begin -> FOR ID EQUALS expression TO expression STEP expression','for_block_begin',8,'p_for_block_begin','basic_yacc.py',427),
  ('function_block_begin -> SUB ID LPAREN params_list RPAREN','function_block_begin',5,'p_function_block_begin','basic_yacc.py',441),
  ('function_block_begin -> FUNCTION ID LPAREN params_list RPAREN','function_block_begin',5,'p_function_block_begin','basic_yacc.py',442),
  ('function_block_begin -> SUB ID LPAREN RPAREN','function_block_begin',4,'p_function_block_begin','basic_yacc.py',443),
  ('function_block_begin -> FUNCTION ID LPAREN RPAREN','function_block_begin',4,'p_function_block_begin','basic_yacc.py',444),
  ('block_end -> END IF','block_end',2,'p_if_block_end','basic_yacc.py',454),
  ('block_end -> END SELECT','block_end',2,'p_select_block_end','basic_yacc.py',462),
  ('block_end -> END WHILE','block_end',2,'p_while_block_end','basic_yacc.py',470),
  ('block_end -> WEND','block_end',1,'p_while_block_end','basic_yacc.py',471),
  ('block_end -> END FOR','block_end',2,'p_for_block_end','basic_yacc.py',479),
  ('block_end -> NEXT ID','block_end',2,'p_for_block_end','basic_yacc.py',480),
  ('block_end -> LOOP','block_end',1,'p_do_block_end','basic_yacc.py',491),
  ('block_end -> LOOP WHILE rel_expression','block_end',3,'p_do_block_end','basic_yacc.py',492),
  ('block_end -> LOOP UNTIL rel_expression','block_end',3,'p_do_block_end','basic_yacc.py',493),
  ('block_end -> END SUB','block_end',2,'p_function_block_end','basic_yacc.py',508),
  ('block_end -> END FUNCTION','block_end',2,'p_function_block_end','basic_yacc.py',509),
  ('return -> RETURN','return',1,'p_return','basic_yacc.py',518),
  ('return -> RETURN expression','return',2,'p_return','basic_yacc.py',519),
  ('control -> EXIT WHILE','control',2,'p_control_exit','basic_yacc.py',535),
  ('control -> EXIT DO','control',2,'p_control_exit','basic_yacc.py',536),
  ('control -> EXIT FOR','control',2,'p_control_exit','basic_yacc.py',537),
  ('control -> CONTINUE WHILE','control',2,'p_control_continue','basic_yacc.py',547),
  ('control -> CONTINUE DO','control',2,'p_control_continue','basic_yacc.py',548),
  ('control -> CONTINUE FOR','control',2,'p_control_continue','basic_yacc.py',549),
  ('statement -> USE ID','statement',2,'p_use_statement','basic_yacc.py',559),
]
